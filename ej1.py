# -*- coding: utf-8 -*-
"""Ej1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1veOY-ETAb-J8RC0f_unikhJ8Wkjr9Rjy

**Ejercio 1:** Se tiene la siguiente lista de valores:

lista_ = [1,2,3,4,5,6,6, [2,4,5,6,7,8,9], 'hola', 45]

Necesitamos extraer de la lista anidada todos los valores que sean menores a 7 ya que son de vital importancia para generar un diccionario de datos.

Consejo: use type para conocer el tipo de datos de los valores de la lista.
"""

list=[1,2,3,4,5,6,6,[2,4,5,6,7,8,9],'hola',45]
type(list)

list=[1,2,3,4,5,6,6,[2,4,5,6,6,5,4,3,2,1,5,6,7,8,9],'hola',45]

def get_values_mix_list(list):
  plana=[]
  get_list=[]
  for index in range (0,len(list)):
    if type(list[index])==int:
       plana.append(list[index])
  for index in range (0,len(list)):
    if type(list[index])==list:
        for elemento in list[index]:
            plana.append(elemento)
  for index in range (0,len(plana)):
    if (plana[index])<7:
       get_list.append(plana[index])
  return get_list

lista_obtenida=get_values_mix_list(list)

result=[2,4,5,6,6,5,4,3,2,1,5,6]
print(result==lista_obtenida)

"""**Ejercicio 2:** Se trata de que usted genere una función para que los valores obtenidos en la lista pasen a formar parte de un diccionario que nos ayude a hacer consultas de los valores que se encuentran en esta estrctura de datos."""

lista=[2,4,5,6,6,5,4,3,2,1,5,6]

def create_dict(lista):

  get_dic={}
  llaves=range(len(lista))
  for index in llaves:
    get_dic[index]=lista[index]

  return get_dic

diccionariocreado=create_dict(lista)
print(diccionariocreado)

solucion={0: 2, 1: 4, 2: 5, 3: 6, 4: 6, 5: 5, 6: 4, 7: 3, 8: 2, 9: 1, 10: 5, 11: 6}
print(solucion == diccionariocreado)

"""**Ejercicio 3:** Se hizo una petición http y se obtiene la siguiente información en un conjunto de lista y diccionario, necesito obtener cierta información de alto valor para relizar un modelo que nos ayude a identificar objetos en una imágen, obtenga los valores de la key 'object' y almacenelos en una lista para su posterior análisis."""

cognitive_response = [
  {
    "rectangle": {
      "x": 6,
      "y": 390,
      "w": 48,
      "h": 40
    },
    "object": "footwear",
    "confidence": 0.513
  },
  {
    "rectangle": {
      "x": 104,
      "y": 104,
      "w": 127,
      "h": 323
    },
    "object": "person",
    "confidence": 0.763
  },
  {
    "rectangle": {
      "x": 174,
      "y": 236,
      "w": 113,
      "h": 74
    },
    "object": "Laptop",
    "parent": {
      "object": "computer",
      "confidence": 0.56
    },
    "confidence": 0.553
  },
  {
    "rectangle": {
      "x": 351,
      "y": 331,
      "w": 154,
      "h": 99
    },
    "object": "seating",
    "confidence": 0.525
  },
  {
    "rectangle": {
      "x": 0,
      "y": 101,
      "w": 174,
      "h": 329
    },
    "object": "person",
    "confidence": 0.855
  },
  {
    "rectangle": {
      "x": 223,
      "y": 99,
      "w": 199,
      "h": 322
    },
    "object": "person",
    "confidence": 0.725
  },
  {
    "rectangle": {
      "x": 154,
      "y": 191,
      "w": 387,
      "h": 218
    },
    "object": "seating",
    "confidence": 0.679
  },
  {
    "rectangle": {
      "x": 111,
      "y": 275,
      "w": 264,
      "h": 151
    },
    "object": "table",
    "confidence": 0.601
  }
]

cognitive_response

"""**Se definio la función para que indique primero los campos que existen en los diccionarios y luego da la opcion para seleccionar alguno de ellos**"""

def get_object(list):
  for j in range (0,len(list)):
    if type (list[j])==dict:
       etiqueta=[]
       etiqueta.append([list[j].keys()])
       print(etiqueta)
  l=[]
  campo=str(input("escriba el campo: "))
  for i in range(0,len(list)):
    l.append(list[i][campo])
  return l

list_objets=get_object(cognitive_response)
print(list_objets)

real_list_objects=['footwear','person','Laptop','seating','person','person','seating','table']
print(list_objets==real_list_objects)

list_objets=get_object(cognitive_response)
print(list_objets)